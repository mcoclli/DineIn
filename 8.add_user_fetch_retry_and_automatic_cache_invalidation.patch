Subject: [PATCH] add user fetch retry and automatic cache invalidation
---
Index: lib/core/constants/app_string.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/constants/app_string.dart b/lib/core/constants/app_string.dart
--- a/lib/core/constants/app_string.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/lib/core/constants/app_string.dart	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -23,7 +23,7 @@
   static const homeText = "Delicious\nfood for you";
   static const addresText = '1058 Lake Forest Drive,NY';
   static const likeEat = 'Where would you like to eat?';
-  static const enter = 'Enter dish Name';
+  static const enter = 'Enter Restaurant Name';
   static const all = 'All';
   static const seafood = 'Seafood';
   static const salad = 'Salad';
Index: lib/core/constants/image_const.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/constants/image_const.dart b/lib/core/constants/image_const.dart
--- a/lib/core/constants/image_const.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/lib/core/constants/image_const.dart	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -9,9 +9,9 @@
 import 'package:flutter_svg/svg.dart';
 import 'package:image_picker/image_picker.dart';
 import 'package:lottie/lottie.dart';
+import 'package:path/path.dart' as path;
 import 'package:path_provider/path_provider.dart';
 import 'package:reservation/core/util/common_utils.dart';
-import 'package:path/path.dart' as path;
 
 class ImageItems {
   final loginlogoImage = "image";
@@ -60,6 +60,7 @@
       required this.type,
       this.isUploadAllowed = false,
       this.refreshFunction});
+
   final String? name;
   final String type;
   final bool isUploadAllowed;
@@ -122,7 +123,7 @@
             } else {
               // data loaded:
               final image = snapshot.data;
-              if (image != null && image != "NA") {
+              if (image != null && image.isNotEmpty && image != "NA") {
                 CommonUtils.log("Image url loaded : [$image] ");
                 return CachedNetworkImage(
                   imageUrl: image,
@@ -134,6 +135,14 @@
                   errorWidget: (context, url, error) => const Icon(Icons.error),
                 );
               } else {
+                if (image?.isEmpty == true) {
+                  CommonUtils.log("Clearing image cache as the url was not fetched");
+                  imageCache.clear();
+                  imageCache.clearLiveImages();
+                  DefaultCacheManager().removeFile(widget.name!).then((value) {
+                    _instance.removeCacheEntry(mapKey: widget.name!);
+                  });
+                }
                 return Image.asset(
                   'assets/image/defaults/${widget.type}.png',
                   fit: BoxFit.fitHeight,
@@ -184,7 +193,9 @@
 
 class PngImage extends StatelessWidget {
   const PngImage({super.key, required this.name});
+
   final String name;
+
   @override
   Widget build(BuildContext context) {
     return Image.asset(_nameWithPath, fit: BoxFit.fitHeight);
@@ -195,7 +206,9 @@
 
 class SvgImage extends StatelessWidget {
   const SvgImage({super.key, required this.name});
+
   final String name;
+
   @override
   Widget build(BuildContext context) {
     return SvgPicture.asset(_nameWithPath, fit: BoxFit.cover);
@@ -206,7 +219,9 @@
 
 class LottieImage extends StatelessWidget {
   const LottieImage({super.key, required this.name});
+
   final String name;
+
   @override
   Widget build(BuildContext context) {
     return Lottie.asset(_nameWithPath, fit: BoxFit.cover);
Index: lib/feature/home_page/view/home_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/home_page/view/home_view.dart b/lib/feature/home_page/view/home_view.dart
--- a/lib/feature/home_page/view/home_view.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/lib/feature/home_page/view/home_view.dart	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -33,7 +33,6 @@
     screenWidth = MediaQuery.of(context).size.width;
 
     return Scaffold(
-      bottomNavigationBar: const BottomNavbar(pageid: 2),
       body: SafeArea(
         child: Padding(
           padding: context.pagePadding,
Index: lib/feature/profile_page/view/profile_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/view/profile_view.dart b/lib/feature/profile_page/view/profile_view.dart
--- a/lib/feature/profile_page/view/profile_view.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/lib/feature/profile_page/view/profile_view.dart	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -35,8 +35,8 @@
     // Fetch the user profile
     CommonUtils.log("Start fetching user data");
     final profileState = Provider.of<ProfileViewModel>(context, listen: false);
-    profileState.fetchUserModel().then((_) {
-      CommonUtils.log("User data fetched, getting restaurant");
+    profileState.fetchUserModelWithRetry().then((success) {
+      CommonUtils.log("User data fetched, getting restaurant. success : $success");
       // After fetching the user, fetch the restaurant
       Provider.of<RestaurantViewModel>(context, listen: false)
           .fetchRestaurantModel(profileState.loggedInUser.restaurantRef!);
Index: lib/feature/profile_page/view/restaurant_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/view/restaurant_view.dart b/lib/feature/profile_page/view/restaurant_view.dart
--- a/lib/feature/profile_page/view/restaurant_view.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/lib/feature/profile_page/view/restaurant_view.dart	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -36,7 +36,7 @@
   void initState() {
     super.initState();
     final profileState = Provider.of<ProfileViewModel>(context, listen: false);
-    profileState.fetchUserModel().then((_) {
+    profileState.fetchUserModelWithRetry().then((_) {
       CommonUtils.log("User data fetched, getting restaurant");
       // After fetching the user, fetch the restaurant
       Provider.of<RestaurantViewModel>(context, listen: false)
Index: lib/feature/profile_page/viewModel/profil_view_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/viewModel/profil_view_model.dart b/lib/feature/profile_page/viewModel/profil_view_model.dart
--- a/lib/feature/profile_page/viewModel/profil_view_model.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/lib/feature/profile_page/viewModel/profil_view_model.dart	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -42,13 +42,35 @@
     _loggedInUser = UserModel();
   }
 
-  fetchUserModel({bool forced = false}) async {
+  final _maxRetries = 5;
+  final _retryDelay = const Duration(milliseconds: 600);
+
+  Future<bool> fetchUserModelWithRetry({int attempt = 0, bool forced = false}) async {
+    CommonUtils.log("Trying to get user data. attempt $attempt");
+    bool success = await fetchUserModel();
+    if (success) {
+      return true; // Success, return true
+    } else if (attempt < _maxRetries) {
+      // Wait for a bit before retrying
+      await Future.delayed(_retryDelay);
+      // Recursively retry with incremented retry count
+      return fetchUserModelWithRetry(attempt: attempt + 1);
+    } else {
+      return false; // Max retries reached, return false
+    }
+  }
+
+  Future<bool> fetchUserModel({bool forced = false}) async {
+    if(user == null) {
+      CommonUtils.log("Authenticated user is null. returning");
+      return false;
+    }
     if (!forced && _loggedInUser.restaurantRef != null) {
       CommonUtils.log(
           "The user is already loaded and returning the old value $_loggedInUser");
-      return;
+      return true;
     }
-    await _db
+    return await _db
         .collection("users")
         .where("uid", isEqualTo: user!.uid)
         .limit(1)
@@ -61,6 +83,7 @@
       (querySnapshot) {
         _loggedInUser = querySnapshot.docs.first.data();
         notifyListeners();
+        return true;
       },
     );
   }
Index: lib/feature/reservation_page/view/reservation_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/reservation_page/view/reservation_view.dart b/lib/feature/reservation_page/view/reservation_view.dart
--- a/lib/feature/reservation_page/view/reservation_view.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/lib/feature/reservation_page/view/reservation_view.dart	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -16,7 +16,6 @@
 import 'package:reservation/products/component/reservation_appbar.dart';
 import 'package:reservation/products/component/reservation_info.dart';
 import 'package:reservation/products/component/table_item_card.dart';
-import 'package:reservation/products/mixin/reservation_category.dart';
 import 'package:reservation/products/widgets/bottom_navbar.dart';
 
 class ReservationsPage extends StatefulWidget {
@@ -28,8 +27,7 @@
   State<ReservationsPage> createState() => _ReservationsPageState();
 }
 
-class _ReservationsPageState extends State<ReservationsPage>
-    with ReservationCategory {
+class _ReservationsPageState extends State<ReservationsPage> {
   final TextEditingController _nameController = TextEditingController();
   final TextEditingController _contactController = TextEditingController();
   final TextEditingController _notesController = TextEditingController();
@@ -69,7 +67,6 @@
           body: Consumer(
             builder: ((context, value, child) {
               return CustomScrollView(
-                controller: scrollController,
                 slivers: [
                   RestaurantAppBar(
                     restaurant: widget.model,
@@ -355,7 +352,6 @@
                     });
                     navigatorKey.currentState!.pop();
                   });
-
                 } else {
                   // Show error for invalid contact number
                   ScaffoldMessenger.of(context).showSnackBar(
Index: lib/products/mixin/reservation_category.dart
===================================================================
diff --git a/lib/products/mixin/reservation_category.dart b/lib/products/mixin/reservation_category.dart
deleted file mode 100644
--- a/lib/products/mixin/reservation_category.dart	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ /dev/null	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
@@ -1,30 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:reservation/core/util/common_utils.dart';
-import 'package:reservation/feature/reservation_page/model/reservation_model.dart';
-
-final scrollController = ScrollController();
-List<double> breackPoints = [];
-mixin ReservationCategory<T extends StatefulWidget> on State<T> {
-  double restoInfoHeight = 200 + 170 - kToolbarHeight;
-
-  @override
-  void initState() {
-    super.initState();
-    createBreackPoints();
-    scrollController.addListener(() {
-      CommonUtils.log("Scrolling");
-      // context
-      //     .read<ReservationViewModel>()
-      //     .updateCategoryIndexOnScroll(scrollController.offset);
-    });
-  }
-
-  void createBreackPoints() {
-    double firstBreackPoint = restoInfoHeight + 50 + (116);
-    breackPoints.add(firstBreackPoint);
-    for (var i = 1; i < allCategoryMenus.length; i++) {
-      double breackPoint = breackPoints.last + 50 + (116);
-      breackPoints.add(breackPoint);
-    }
-  }
-}
Index: storage.rules
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/storage.rules b/storage.rules
--- a/storage.rules	(revision bff9398ce880434ca7037c6370adb0f79ce2f46e)
+++ b/storage.rules	(revision d03b0be61c1360ffaf7942981100ca1590b0dd76)
@@ -6,7 +6,7 @@
 service firebase.storage {
   match /b/{bucket}/o {
     match /{allPaths=**} {
-      allow read, write: if request.auth != null;
+      allow read, write: if true;
     }
   }
 }
