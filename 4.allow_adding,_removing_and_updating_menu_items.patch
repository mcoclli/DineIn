Subject: [PATCH] allow adding, removing and updating menu items
---
Index: lib/feature/profile_page/model/menu_item_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/model/menu_item_model.dart b/lib/feature/profile_page/model/menu_item_model.dart
--- a/lib/feature/profile_page/model/menu_item_model.dart	(revision 4ce5588c67e9aad723375e11e3d4a8233de2a07e)
+++ b/lib/feature/profile_page/model/menu_item_model.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
@@ -1,17 +1,19 @@
+import 'package:uuid/uuid.dart';
+
 class MenuItemModel {
-  String? id;
+  String id ;
   String? name;
   String? description;
   String? imageUrl;
   double? price;
 
   MenuItemModel({
-    this.id,
+    id,
     this.name,
     this.description,
-    this.imageUrl,
+    required this.imageUrl,
     this.price,
-  });
+  }): id = id ?? const Uuid().v4().toString();
 
   factory MenuItemModel.fromMap(map) {
     return MenuItemModel(
Index: lib/feature/profile_page/model/restaurant_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/model/restaurant_model.dart b/lib/feature/profile_page/model/restaurant_model.dart
--- a/lib/feature/profile_page/model/restaurant_model.dart	(revision 4ce5588c67e9aad723375e11e3d4a8233de2a07e)
+++ b/lib/feature/profile_page/model/restaurant_model.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
@@ -10,7 +10,7 @@
   String? cuisine;
   String? meanCost;
   String? address;
-  List<MenuItemModel>? menuItems;
+  List<MenuItemModel> menuItems = [];
 
   RestaurantModel({
     this.id,
@@ -20,7 +20,7 @@
     this.cuisine,
     this.meanCost,
     this.address,
-    this.menuItems,
+    required this.menuItems,
   });
 
   factory RestaurantModel.fromMap(map) {
@@ -45,7 +45,7 @@
       'cuisine': cuisine,
       'meanCost': meanCost,
       'address': address,
-      'menuItems': (menuItems ?? []).map((element) => element.toMap()),
+      'menuItems': menuItems.map((element) => element.toMap()),
     };
   }
 
@@ -76,8 +76,7 @@
       if (cuisine != null) "cuisine": cuisine,
       if (meanCost != null) "meanCost": meanCost,
       if (address != null) "address": address,
-      if (menuItems != null)
-        "menuItems": (menuItems ?? []).map((e) => e.toMap()).toList(),
+      "menuItems": menuItems.map((e) => e.toMap()).toList(),
     };
   }
 }
Index: lib/feature/profile_page/view/restaurant_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/view/restaurant_view.dart b/lib/feature/profile_page/view/restaurant_view.dart
--- a/lib/feature/profile_page/view/restaurant_view.dart	(revision 4ce5588c67e9aad723375e11e3d4a8233de2a07e)
+++ b/lib/feature/profile_page/view/restaurant_view.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
@@ -1,4 +1,7 @@
+import 'package:cached_firestorage/cached_firestorage.dart';
+import 'package:firebase_storage/firebase_storage.dart';
 import 'package:flutter/material.dart';
+import 'package:flutter_cache_manager/flutter_cache_manager.dart';
 import 'package:provider/provider.dart';
 import 'package:reservation/core/constants/app_colors.dart';
 import 'package:reservation/core/extensions/extension.dart';
@@ -6,6 +9,7 @@
 import 'package:reservation/feature/profile_page/model/restaurant_model.dart';
 import 'package:reservation/feature/profile_page/viewModel/profil_view_model.dart';
 import 'package:reservation/feature/profile_page/viewModel/restaurant_view_model.dart';
+import 'package:reservation/products/component/closable_widget.dart';
 import 'package:reservation/products/component/menu_item_card.dart';
 
 class RestaurantView extends StatefulWidget {
@@ -21,6 +25,7 @@
   final TextEditingController _meanCostController = TextEditingController();
   final TextEditingController _addressController = TextEditingController();
   bool _isEditing = false;
+  bool _isMenuChanged = false;
 
   @override
   void initState() {
@@ -67,11 +72,27 @@
           children: [
             _isEditing
                 ? Center(
-                    child: FloatingActionButton(
-                      onPressed: () {
-                        _executeDataUpdate(restaurant, restaurantState);
-                      },
-                      child: const Icon(Icons.save),
+                    child: Row(
+                      mainAxisAlignment: MainAxisAlignment.center,
+                      children: [
+                        FloatingActionButton(
+                          onPressed: () {
+                            _executeDataUpdate(restaurant, restaurantState);
+                          },
+                          child: const Icon(Icons.save),
+                        ),
+                        const SizedBox(
+                          width: 10,
+                        ),
+                        FloatingActionButton(
+                          onPressed: () {
+                            setState(() {
+                              _isEditing = false;
+                            });
+                          },
+                          child: const Icon(Icons.undo),
+                        ),
+                      ],
                     ),
                   )
                 : Container(),
@@ -207,12 +228,30 @@
               children: <Widget>[
                 Padding(
                   padding: context.paddingNormalVertical,
-                  child: Text(
-                    "Menu",
-                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
-                          color: AppColors.black,
-                          fontWeight: FontWeight.w600,
-                        ),
+                  child: Row(
+                    children: [
+                      Text(
+                        "Menu",
+                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
+                              color: AppColors.black,
+                              fontWeight: FontWeight.w600,
+                            ),
+                      ),
+                      const SizedBox(width: 20),
+                      _isMenuChanged
+                          ? GestureDetector(
+                              onTap: () {
+                                CommonUtils.log("Saving menu items");
+                                restaurantState.updateRestaurant(
+                                    restaurantState.currentRestaurant!);
+                                setState(() {
+                                  _isMenuChanged = false;
+                                });
+                              },
+                              child: const Icon(Icons.save),
+                            )
+                          : Container(),
+                    ],
                   ),
                 ),
                 const SizedBox(
@@ -221,14 +260,66 @@
                 ...(restaurant.menuItems ?? []).map((item) {
                   return Padding(
                     padding: context.pagePaddingBottom,
-                    child: MenuItemCard(
-                      name: item.name ?? "name",
-                      description: item.description ?? "",
-                      imageUrl: item.imageUrl,
-                      price: item.price ?? 0.0,
+                    child: ClosableWidget(
+                      closeFunction: () async {
+                        CommonUtils.log(
+                            "Removing menu item ${item.id} from menu");
+                        restaurantState.removeMenuItem(item.id);
+                        FirebaseStorage.instance
+                            .ref(item.imageUrl!)
+                            .delete()
+                            .then((value) async {
+                              CommonUtils.log("Image was deleted for url ${item.imageUrl}");
+                          await DefaultCacheManager()
+                              .removeFile(item.imageUrl!)
+                              .then((value) {
+                            CachedFirestorage.instance
+                                .removeCacheEntry(mapKey: item.imageUrl!);
+                          });
+                        });
+
+                        setState(() {
+                          _isMenuChanged = true;
+                        });
+                      },
+                      child: MenuItemCard(
+                        itemModel: item,
+                        updateFunction: (itemModel) {
+                          restaurantState.updateMenuItem(itemModel);
+                          setState(() {
+                            _isMenuChanged = true;
+                          });
+                        },
+                        imageRefreshFunction: () {
+                          restaurantState.fetchRestaurantModel(
+                            profileProvider.loggedInUser.restaurantRef!,
+                            forced: true,
+                          );
+                        },
+                      ),
                     ),
                   );
                 }),
+                const SizedBox(
+                  height: 5,
+                ),
+                Center(
+                  child: CircleAvatar(
+                    radius: 20, // Adjust the size of the button
+                    backgroundColor: Colors.blue, // Button color
+                    child: IconButton(
+                      icon: const Icon(Icons.add, color: Colors.white),
+                      onPressed: () {
+                        CommonUtils.log("Adding new menu item");
+                        restaurantState.addEmptyMenuItem();
+                        setState(() {
+                          _isEditing = false;
+                          _isMenuChanged = true;
+                        });
+                      },
+                    ),
+                  ),
+                ),
               ],
             ),
           ],
Index: lib/feature/profile_page/viewModel/restaurant_view_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/viewModel/restaurant_view_model.dart b/lib/feature/profile_page/viewModel/restaurant_view_model.dart
--- a/lib/feature/profile_page/viewModel/restaurant_view_model.dart	(revision 4ce5588c67e9aad723375e11e3d4a8233de2a07e)
+++ b/lib/feature/profile_page/viewModel/restaurant_view_model.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
@@ -1,7 +1,9 @@
 import 'package:flutter/material.dart';
 import 'package:reservation/core/util/common_utils.dart';
 import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:reservation/feature/profile_page/model/menu_item_model.dart';
 import 'package:reservation/feature/profile_page/model/restaurant_model.dart';
+import 'package:uuid/uuid.dart';
 
 class RestaurantViewModel extends ChangeNotifier {
   final FirebaseFirestore _db = FirebaseFirestore.instance;
@@ -40,6 +42,33 @@
         notifyListeners();
       },
     );
+  }
+
+  addEmptyMenuItem() {
+    var itemId = const Uuid().v4().toString();
+    _currentRestaurent?.menuItems.add(
+      MenuItemModel(
+        id: itemId,
+        imageUrl: "restaurants/${_currentRestaurent!.id}/$itemId.jpeg",
+      ),
+    );
+    notifyListeners();
+  }
+
+  removeMenuItem(String id) {
+    _currentRestaurent?.menuItems.removeWhere((element) => id == element.id);
+    notifyListeners();
+  }
+
+  updateMenuItem(MenuItemModel itemModel) {
+    var itemToUpdate = _currentRestaurent?.menuItems
+        .firstWhere((element) => itemModel.id == element.id);
+    if (itemToUpdate != null) {
+      itemToUpdate.name = itemModel.name;
+      itemToUpdate.description = itemModel.description;
+      itemToUpdate.price = itemModel.price;
+    }
+    notifyListeners();
   }
 
   updateRestaurant(RestaurantModel updated) async {
Index: lib/products/component/closable_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/products/component/closable_widget.dart b/lib/products/component/closable_widget.dart
new file mode 100644
--- /dev/null	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
+++ b/lib/products/component/closable_widget.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
@@ -0,0 +1,51 @@
+import 'package:flutter/material.dart';
+
+class ClosableWidget extends StatelessWidget {
+  final Widget child;
+
+  const ClosableWidget({super.key, required this.child, this.closeFunction});
+
+  final void Function()? closeFunction;
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: const EdgeInsets.all(8.0),
+      child: Stack(
+        children: [
+          Container(
+            decoration: BoxDecoration(
+              border: Border.all(
+                color: Colors.blue, // Border color for the child
+                width: 2, // Border width for the child
+              ),
+              borderRadius: BorderRadius.circular(10), // Rounded edges for the child
+            ),
+            child: ClipRRect(
+              borderRadius: BorderRadius.circular(8), // Ensures the child content respects the border radius
+              child: child, // Your main content
+            ),
+          ),
+          Positioned(
+            right: 0,
+            top: 0,
+            child: GestureDetector(
+              onTap: () {
+                if (closeFunction != null) {
+                  closeFunction!();
+                }
+              },
+              child: Container(
+                padding: const EdgeInsets.all(10),
+                child: const Icon(
+                  Icons.close,
+                  color: Colors.red,
+                ), // Padding inside the container
+              ),
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: lib/products/component/menu_item_card.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/products/component/menu_item_card.dart b/lib/products/component/menu_item_card.dart
--- a/lib/products/component/menu_item_card.dart	(revision 4ce5588c67e9aad723375e11e3d4a8233de2a07e)
+++ b/lib/products/component/menu_item_card.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
@@ -3,19 +3,20 @@
 import 'package:reservation/core/constants/app_string.dart';
 import 'package:reservation/core/constants/image_const.dart';
 import 'package:reservation/core/extensions/extension.dart';
+import 'package:reservation/core/util/common_utils.dart';
+import 'package:reservation/feature/profile_page/model/menu_item_model.dart';
 
 class MenuItemCard extends StatefulWidget {
   const MenuItemCard({
     super.key,
-    required this.name,
-    required this.description,
-    this.imageUrl,
-    required this.price,
+    required this.itemModel,
+    this.updateFunction,
+    this.imageRefreshFunction,
   });
 
-  final String name, description;
-  final String? imageUrl;
-  final double price;
+  final MenuItemModel itemModel;
+  final void Function(MenuItemModel itemModel)? updateFunction;
+  final void Function()? imageRefreshFunction;
 
   @override
   State<MenuItemCard> createState() => _MenuItemCardState();
@@ -37,22 +38,76 @@
 
   @override
   Widget build(BuildContext context) {
-    _nameController.text = widget.name;
-    _descriptionController.text = widget.description;
-    _priceController.text = "${widget.price}";
+    _nameController.text = widget.itemModel.name ?? "";
+    _descriptionController.text = widget.itemModel.description ?? "";
+    _priceController.text = "${widget.itemModel.price ?? 0.0}";
     return SizedBox(
-      height: context.dynamicHeight(0.2),
       child: Row(
         mainAxisAlignment: MainAxisAlignment.start,
         crossAxisAlignment: CrossAxisAlignment.start,
         children: [
-          SizedBox(
-            width: context.dynamicWidth(0.30),
-            height: context.dynamicHeight(0.14),
-            child: CloudImage(
-              name: widget.imageUrl,
-              type: 'menu-item',
-            ),
+          Column(
+            children: [
+              SizedBox(
+                width: context.dynamicWidth(0.30),
+                height: context.dynamicHeight(0.14),
+                child: CloudImage(
+                    name: widget.itemModel.imageUrl,
+                    type: 'menu-item',
+                    isUploadAllowed: true,
+                    refreshFunction: () async {
+                      CommonUtils.log("refreshing the model for restaurant");
+                      if (widget.imageRefreshFunction != null) {
+                        widget.imageRefreshFunction!();
+                      }
+                    }),
+              ),
+              _isEditing
+                  ? Center(
+                      child: SizedBox(
+                        height: 30,
+                        child: Row(
+                          mainAxisAlignment: MainAxisAlignment.center,
+                          children: [
+                            FloatingActionButton(
+                              onPressed: () {
+                                widget.itemModel.name = _nameController.text;
+                                widget.itemModel.description =
+                                    _descriptionController.text;
+                                widget.itemModel.price =
+                                    double.parse(_priceController.text);
+                                if (widget.updateFunction != null) {
+                                  widget.updateFunction!(widget.itemModel);
+                                }
+                                setState(() {
+                                  _isEditing = false;
+                                });
+                              },
+                              child: const Icon(Icons.save),
+                            ),
+                            const SizedBox(
+                              width: 10,
+                            ),
+                            FloatingActionButton(
+                              onPressed: () {
+                                _nameController.text =
+                                    widget.itemModel.name ?? "";
+                                _descriptionController.text =
+                                    widget.itemModel.description ?? "";
+                                _priceController.text =
+                                    "${widget.itemModel.price}";
+                                setState(() {
+                                  _isEditing = false;
+                                });
+                              },
+                              child: const Icon(Icons.undo),
+                            ),
+                          ],
+                        ),
+                      ),
+                    )
+                  : Container()
+            ],
           ),
           SizedBox(width: context.dynamicWidth(0.05)),
           Expanded(
@@ -73,7 +128,7 @@
                             autofocus: true,
                           )
                         : Text(
-                            widget.name,
+                            widget.itemModel.name ?? "Item Name",
                             style: Theme.of(context)
                                 .textTheme
                                 .titleLarge
@@ -98,7 +153,7 @@
                             autofocus: true,
                           )
                         : Text(
-                            widget.description,
+                            widget.itemModel.description ?? "Item Description",
                             maxLines: 2,
                             overflow: TextOverflow.ellipsis,
                           ),
@@ -133,7 +188,7 @@
                                           decimal: true),
                                 )
                               : Text(
-                                  "\$${widget.price}",
+                                  "\$${widget.itemModel.price ?? 0.0}",
                                   style: Theme.of(context)
                                       .textTheme
                                       .bodyLarge
