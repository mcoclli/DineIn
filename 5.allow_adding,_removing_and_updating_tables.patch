Subject: [PATCH] allow adding, removing and updating tables
---
Index: lib/feature/profile_page/model/restaurant_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/model/restaurant_model.dart b/lib/feature/profile_page/model/restaurant_model.dart
--- a/lib/feature/profile_page/model/restaurant_model.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
+++ b/lib/feature/profile_page/model/restaurant_model.dart	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
@@ -1,6 +1,6 @@
 import 'package:cloud_firestore/cloud_firestore.dart';
-import 'package:reservation/core/util/common_utils.dart';
 import 'package:reservation/feature/profile_page/model/menu_item_model.dart';
+import 'package:reservation/feature/profile_page/model/table_model.dart';
 
 class RestaurantModel {
   String? id;
@@ -11,6 +11,8 @@
   String? meanCost;
   String? address;
   List<MenuItemModel> menuItems = [];
+  int? maxConsecutiveSlots = 2;
+  List<TableModel> tables = [];
 
   RestaurantModel({
     this.id,
@@ -21,6 +23,8 @@
     this.meanCost,
     this.address,
     required this.menuItems,
+    this.maxConsecutiveSlots,
+    required this.tables,
   });
 
   factory RestaurantModel.fromMap(map) {
@@ -34,6 +38,10 @@
       menuItems: ((map['menuItems'] ?? []) as List)
           .map((field) => MenuItemModel.fromMap(field))
           .toList(),
+      maxConsecutiveSlots: map['maxConsecutiveSlots'],
+      tables: ((map['tables'] ?? []) as List)
+          .map((field) => TableModel.fromMap(field))
+          .toList(),
     );
   }
 
@@ -46,6 +54,8 @@
       'meanCost': meanCost,
       'address': address,
       'menuItems': menuItems.map((element) => element.toMap()),
+      'maxConsecutiveSlots': maxConsecutiveSlots,
+      'tables': tables.map((element) => element.toMap()),
     };
   }
 
@@ -65,6 +75,10 @@
       menuItems: ((data['menuItems'] ?? []) as List)
           .map((e) => MenuItemModel.fromMap(e as Map<String, dynamic>))
           .toList(growable: true),
+      maxConsecutiveSlots: data['maxConsecutiveSlots'],
+      tables: ((data['tables'] ?? []) as List)
+          .map((e) => TableModel.fromMap(e as Map<String, dynamic>))
+          .toList(growable: true),
     );
   }
 
@@ -77,6 +91,8 @@
       if (meanCost != null) "meanCost": meanCost,
       if (address != null) "address": address,
       "menuItems": menuItems.map((e) => e.toMap()).toList(),
+      if (maxConsecutiveSlots != null)
+        "maxConsecutiveSlots": maxConsecutiveSlots,
     };
   }
 }
Index: lib/feature/profile_page/model/table_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/model/table_model.dart b/lib/feature/profile_page/model/table_model.dart
new file mode 100644
--- /dev/null	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
+++ b/lib/feature/profile_page/model/table_model.dart	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
@@ -0,0 +1,41 @@
+import 'package:uuid/uuid.dart';
+
+class TableModel {
+  String id;
+  String? ref;
+  bool? allowManualSize;
+  bool? canExtend;
+  int? occupancy;
+  String? description;
+
+  TableModel({
+    id,
+    this.ref,
+    this.allowManualSize,
+    this.canExtend,
+    this.occupancy,
+    this.description,
+  }) : id = id ?? const Uuid().v4().toString();
+
+  factory TableModel.fromMap(map) {
+    return TableModel(
+      id: map['id'],
+      ref: map['ref'],
+      allowManualSize: map['allowManualSize'],
+      canExtend: map['canExtend'],
+      occupancy: map['occupancy'],
+      description: map['description'],
+    );
+  }
+
+  Map<String, dynamic> toMap() {
+    return {
+      'id': id,
+      'ref': ref,
+      'allowManualSize': allowManualSize,
+      'canExtend': canExtend,
+      'occupancy': occupancy,
+      'description': description,
+    };
+  }
+}
Index: lib/feature/profile_page/view/profile_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/view/profile_view.dart b/lib/feature/profile_page/view/profile_view.dart
--- a/lib/feature/profile_page/view/profile_view.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
+++ b/lib/feature/profile_page/view/profile_view.dart	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
@@ -7,6 +7,7 @@
 import 'package:reservation/core/util/common_utils.dart';
 import 'package:reservation/feature/login_register_page/model/users_model.dart';
 import 'package:reservation/feature/profile_page/view/restaurant_view.dart';
+import 'package:reservation/products/component/table_item_card.dart';
 import 'package:reservation/feature/profile_page/viewModel/profil_view_model.dart';
 import 'package:reservation/feature/profile_page/viewModel/restaurant_view_model.dart';
 import 'package:reservation/products/widgets/bottom_navbar.dart';
@@ -62,7 +63,6 @@
             _stackWidget(context, profileProvider, restaurantState),
             _adminText(context, loggedInUser),
             const RestaurantView(),
-            _reviews(context),
           ],
         ),
       ),
@@ -122,77 +122,6 @@
             ],
           ),
         ),
-      ),
-    );
-  }
-
-  Padding _reviews(BuildContext context) {
-    return Padding(
-      padding: context.pagePadding,
-      child: Column(
-        mainAxisAlignment: MainAxisAlignment.start,
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          Text(
-            StringConstant.review,
-            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
-                color: AppColors.blueMetallic, fontWeight: FontWeight.bold),
-          ),
-          SizedBox(
-            height: context.dynamicHeight(0.02),
-          ),
-          SizedBox(
-            width: context.dynamicWidth(10),
-            child: Row(
-              mainAxisAlignment: MainAxisAlignment.spaceBetween,
-              children: [
-                const PngImage(name: ImageItems.logImage),
-                Column(
-                  mainAxisAlignment: MainAxisAlignment.center,
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    Text(
-                      StringConstant.hello,
-                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
-                          color: AppColors.blueMetallic,
-                          fontWeight: FontWeight.bold),
-                    ),
-                    SizedBox(
-                      width: context.dynamicWidth(0.8),
-                      child: Text(
-                        StringConstant.text,
-                        style:
-                            Theme.of(context).textTheme.titleMedium?.copyWith(
-                                  color: AppColors.silverlined,
-                                ),
-                      ),
-                    ),
-                    SizedBox(
-                      height: context.dynamicHeight(0.01),
-                    ),
-                    Row(children: [
-                      for (int i = 0; i < 5; i++)
-                        Icon(Icons.star,
-                            size: 20,
-                            color: i == 4
-                                ? AppColors.darkGrey
-                                : AppColors.california),
-                      SizedBox(
-                        width: context.dynamicWidth(0.03),
-                      ),
-                      Text(
-                        StringConstant.number,
-                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
-                            color: AppColors.darkGrey,
-                            fontWeight: FontWeight.bold),
-                      ),
-                    ]),
-                  ],
-                ),
-              ],
-            ),
-          )
-        ],
       ),
     );
   }
Index: lib/feature/profile_page/view/restaurant_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/view/restaurant_view.dart b/lib/feature/profile_page/view/restaurant_view.dart
--- a/lib/feature/profile_page/view/restaurant_view.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
+++ b/lib/feature/profile_page/view/restaurant_view.dart	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
@@ -11,6 +11,7 @@
 import 'package:reservation/feature/profile_page/viewModel/restaurant_view_model.dart';
 import 'package:reservation/products/component/closable_widget.dart';
 import 'package:reservation/products/component/menu_item_card.dart';
+import 'package:reservation/products/component/table_item_card.dart';
 
 class RestaurantView extends StatefulWidget {
   const RestaurantView({super.key});
@@ -26,6 +27,7 @@
   final TextEditingController _addressController = TextEditingController();
   bool _isEditing = false;
   bool _isMenuChanged = false;
+  bool _isTablesChanged = false;
 
   @override
   void initState() {
@@ -269,7 +271,8 @@
                             .ref(item.imageUrl!)
                             .delete()
                             .then((value) async {
-                              CommonUtils.log("Image was deleted for url ${item.imageUrl}");
+                          CommonUtils.log(
+                              "Image was deleted for url ${item.imageUrl}");
                           await DefaultCacheManager()
                               .removeFile(item.imageUrl!)
                               .then((value) {
@@ -322,6 +325,85 @@
                 ),
               ],
             ),
+            Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: <Widget>[
+                Padding(
+                  padding: context.paddingNormalVertical,
+                  child: Row(
+                    children: [
+                      Text(
+                        "Table",
+                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
+                              color: AppColors.black,
+                              fontWeight: FontWeight.w600,
+                            ),
+                      ),
+                      const SizedBox(width: 20),
+                      _isTablesChanged
+                          ? GestureDetector(
+                              onTap: () {
+                                CommonUtils.log("Saving table items");
+                                restaurantState.updateRestaurant(
+                                    restaurantState.currentRestaurant!);
+                                setState(() {
+                                  _isTablesChanged = false;
+                                });
+                              },
+                              child: const Icon(Icons.save),
+                            )
+                          : Container(),
+                    ],
+                  ),
+                ),
+                const SizedBox(
+                  height: 10,
+                ),
+                ...(restaurant.tables ?? []).map((item) {
+                  return Padding(
+                    padding: context.pagePaddingBottom,
+                    child: ClosableWidget(
+                      closeFunction: () async {
+                        CommonUtils.log("Removing table ${item.id}");
+                        restaurantState.removeTable(item.id);
+                        setState(() {
+                          _isTablesChanged = true;
+                        });
+                      },
+                      child: TableItemCard(
+                        model: item,
+                        updateFunction: (itemModel) {
+                          restaurantState.updateTable(itemModel);
+                          setState(() {
+                            _isTablesChanged = true;
+                          });
+                        },
+                      ),
+                    ),
+                  );
+                }),
+                const SizedBox(
+                  height: 5,
+                ),
+                Center(
+                  child: CircleAvatar(
+                    radius: 20, // Adjust the size of the button
+                    backgroundColor: Colors.blue, // Button color
+                    child: IconButton(
+                      icon: const Icon(Icons.add, color: Colors.white),
+                      onPressed: () {
+                        CommonUtils.log("Adding new table");
+                        restaurantState.addEmptyTable();
+                        setState(() {
+                          _isEditing = false;
+                          _isTablesChanged = true;
+                        });
+                      },
+                    ),
+                  ),
+                ),
+              ],
+            ),
           ],
         ),
       );
Index: lib/feature/profile_page/viewModel/restaurant_view_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/feature/profile_page/viewModel/restaurant_view_model.dart b/lib/feature/profile_page/viewModel/restaurant_view_model.dart
--- a/lib/feature/profile_page/viewModel/restaurant_view_model.dart	(revision 1164cfb3c1c48ba1ec4072f28502fadbf2c23001)
+++ b/lib/feature/profile_page/viewModel/restaurant_view_model.dart	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
@@ -3,6 +3,7 @@
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:reservation/feature/profile_page/model/menu_item_model.dart';
 import 'package:reservation/feature/profile_page/model/restaurant_model.dart';
+import 'package:reservation/feature/profile_page/model/table_model.dart';
 import 'package:uuid/uuid.dart';
 
 class RestaurantViewModel extends ChangeNotifier {
@@ -54,11 +55,26 @@
     );
     notifyListeners();
   }
+
+  addEmptyTable() {
+    var itemId = const Uuid().v4().toString();
+    _currentRestaurent?.tables.add(
+      TableModel(
+        id: itemId,
+      ),
+    );
+    notifyListeners();
+  }
 
   removeMenuItem(String id) {
     _currentRestaurent?.menuItems.removeWhere((element) => id == element.id);
     notifyListeners();
   }
+
+  removeTable(String id) {
+    _currentRestaurent?.tables.removeWhere((element) => id == element.id);
+    notifyListeners();
+  }
 
   updateMenuItem(MenuItemModel itemModel) {
     var itemToUpdate = _currentRestaurent?.menuItems
@@ -68,7 +84,20 @@
       itemToUpdate.description = itemModel.description;
       itemToUpdate.price = itemModel.price;
     }
-    notifyListeners();
+    // notifyListeners();
+  }
+
+  updateTable(TableModel itemModel) {
+    var itemToUpdate = _currentRestaurent?.tables
+        .firstWhere((element) => itemModel.id == element.id);
+    if (itemToUpdate != null) {
+      itemToUpdate.ref = itemModel.ref;
+      itemToUpdate.description = itemModel.description;
+      itemToUpdate.allowManualSize = itemModel.allowManualSize;
+      itemToUpdate.canExtend = itemModel.canExtend;
+      itemToUpdate.occupancy = itemModel.occupancy;
+    }
+    // notifyListeners();
   }
 
   updateRestaurant(RestaurantModel updated) async {
Index: lib/products/component/table_item_card.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/products/component/table_item_card.dart b/lib/products/component/table_item_card.dart
new file mode 100644
--- /dev/null	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
+++ b/lib/products/component/table_item_card.dart	(revision a3d89f1beb9b6c7b7c620c354e807b9b0067bad2)
@@ -0,0 +1,146 @@
+import 'package:cached_firestorage/cached_firestorage.dart';
+import 'package:firebase_storage/firebase_storage.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_cache_manager/flutter_cache_manager.dart';
+import 'package:provider/provider.dart';
+import 'package:reservation/core/constants/app_colors.dart';
+import 'package:reservation/core/extensions/extension.dart';
+import 'package:reservation/core/util/common_utils.dart';
+import 'package:reservation/feature/profile_page/model/restaurant_model.dart';
+import 'package:reservation/feature/profile_page/model/table_model.dart';
+import 'package:reservation/feature/profile_page/viewModel/profil_view_model.dart';
+import 'package:reservation/feature/profile_page/viewModel/restaurant_view_model.dart';
+import 'package:reservation/products/component/closable_widget.dart';
+import 'package:reservation/products/component/menu_item_card.dart';
+
+class TableItemCard extends StatefulWidget {
+  const TableItemCard({
+    super.key,
+    required this.model,
+    this.updateFunction,
+  });
+
+  final TableModel model;
+  final void Function(TableModel model)? updateFunction;
+
+  @override
+  State<TableItemCard> createState() => _TableItemCardState();
+}
+
+class _TableItemCardState extends State<TableItemCard> {
+  final _formKey = GlobalKey<FormState>();
+  bool _isEditing = false;
+
+  @override
+  Widget build(BuildContext context) {
+    var tableModel = widget.model;
+    return SizedBox(
+      child: GestureDetector(
+        onTap: () {
+          setState(() {
+            _isEditing = true;
+          });
+        },
+        child: Padding(
+          padding: const EdgeInsets.all(8.0),
+          child: Padding(
+            padding: const EdgeInsets.all(8.0),
+            child: Form(
+              key: _formKey,
+              child: Column(
+                children: [
+                  _isEditing
+                      ? SizedBox(
+                          height: 30,
+                          child: Row(
+                            mainAxisAlignment: MainAxisAlignment.start,
+                            children: [
+                              GestureDetector(
+                                onTap: () {
+                                  if (_formKey.currentState!.validate()) {
+                                    _formKey.currentState!.save();
+                                    setState(() {
+                                      _isEditing = false;
+                                    });
+                                  }
+                                },
+                                child: const Icon(Icons.save),
+                              ),
+                              const SizedBox(
+                                width: 10,
+                              ),
+                              GestureDetector(
+                                onTap: () {
+                                  _formKey.currentState?.reset();
+                                  setState(() {
+                                    _isEditing = false;
+                                  });
+                                },
+                                child: const Icon(Icons.undo),
+                              ),
+                            ],
+                          ),
+                        )
+                      : GestureDetector(
+                          onTap: () {
+                            setState(() {
+                              _isEditing = true;
+                            });
+                          },
+                          child: const Row(
+                            children: [
+                              Icon(Icons.edit),
+                            ],
+                          ),
+                        ),
+                  TextFormField(
+                    initialValue: tableModel.ref,
+                    decoration: const InputDecoration(labelText: 'Reference'),
+                    readOnly: !_isEditing,
+                    onSaved: (value) => tableModel.ref = value,
+                  ),
+                  SwitchListTile(
+                    title: const Text('Allow Manual Size'),
+                    value: tableModel.allowManualSize ?? false,
+                    onChanged: _isEditing
+                        ? (bool value) {
+                            setState(() {
+                              tableModel.allowManualSize = value;
+                            });
+                          }
+                        : null,
+                  ),
+                  SwitchListTile(
+                    title: const Text('Can Extend'),
+                    value: tableModel.canExtend ?? false,
+                    onChanged: _isEditing
+                        ? (bool value) {
+                            setState(() {
+                              tableModel.canExtend = value;
+                            });
+                          }
+                        : null,
+                  ),
+                  TextFormField(
+                    initialValue: tableModel.occupancy?.toString(),
+                    decoration: const InputDecoration(labelText: 'Occupancy'),
+                    readOnly: !_isEditing,
+                    keyboardType: TextInputType.number,
+                    onSaved: (value) =>
+                        tableModel.occupancy = int.tryParse(value!),
+                  ),
+                  TextFormField(
+                    initialValue: tableModel.description,
+                    decoration: const InputDecoration(labelText: 'Description'),
+                    readOnly: !_isEditing,
+                    onSaved: (value) => tableModel.description = value,
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
